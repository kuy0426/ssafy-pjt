# Generated by Django 4.2.21 on 2025-05-22 11:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('tmdb_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'actor',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('tmdb_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'genre',
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('tmdb_id', models.IntegerField(primary_key=True, serialize=False)),
                ('original_title', models.CharField(max_length=128)),
                ('description', models.TextField()),
                ('vote_average', models.DecimalField(decimal_places=2, max_digits=5)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('runtime', models.IntegerField(default=0, help_text='분 단위')),
            ],
            options={
                'db_table': 'movie',
            },
        ),
        migrations.CreateModel(
            name='MovieLikeUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'movie_like_users',
                'unique_together': {('user', 'movie')},
            },
        ),
        migrations.CreateModel(
            name='MovieGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.genre')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
            ],
            options={
                'db_table': 'movie_genre',
                'unique_together': {('movie', 'genre')},
            },
        ),
        migrations.CreateModel(
            name='MovieActor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.actor')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movies.movie')),
            ],
            options={
                'db_table': 'movie_actor',
                'unique_together': {('movie', 'actor')},
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='actors',
            field=models.ManyToManyField(related_name='movies', through='movies.MovieActor', to='movies.actor'),
        ),
        migrations.AddField(
            model_name='movie',
            name='genres',
            field=models.ManyToManyField(related_name='movies', through='movies.MovieGenre', to='movies.genre'),
        ),
        migrations.AddField(
            model_name='movie',
            name='liked_users',
            field=models.ManyToManyField(related_name='liked_movies', through='movies.MovieLikeUsers', to=settings.AUTH_USER_MODEL),
        ),
    ]
